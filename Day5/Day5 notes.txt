Dynamic Memory allocation : uses memory in efficient way by 
allocating only when needed, and removing once the work with the variables, memory has been finished.

** Static memory allocation will keep the memory as it was allocated and no other process can use that memory for any other purpose, so Dynamic Memory Allocation will remove this disadvantage.

** This Dynamic Memory Allocation will have 4 functions for allocating and de-allocating the memory.
1. malloc();
2. callac();
3. realloc();
4. free();


1. malloc(): this will allocate the memory you want it, with the help of sizeof function..


syntax : malloc(size);

ex: 		malloc(24 );






1st  :  9 54 41 31 49 24 17 16 46 27		--> even position

2nd : 28 38 23 2 26 33 39 56 10 6 11	--> odd indexed
		
3rd  : 3 21 5 25 47 59 69 4 60 7 52 15  --> odd position 

4th  : 106 47 20 50 51 57 19 40 108 53 16 35 37  -> even index


starting time : 11:11 08-11-2024
ending time  :  ______________
 

to get the values of  

position = index + 1

index = position - 1





INPUT : 47 1008 172 100 111 57 68 88 101 31 1 24 69 18 5 28
				 27 40 88 106 10 27 420


OUTPUT : 47 111 57 101 31 1 69 5 27 27     

Take an array with 10 values in it, and display all the odd values in it............




Deletion in arrays : 

1. based on value

2. based on index



1st way : based on value

int r_value;
scanf("%d",&r_value);

for(int i=0;i<size;i++)
{
	if( Array[i] == r_value) 
	{
			continue;
	}
	printf("%d ",Array[i]);
}



10 20 30 40 50

remove : 30 

10 20 40 50

10 20 30 40 10 20 20 70 -> size = 7

remove : 20

after : 
1st : 10 30 40 10 20 20 70 70, count =1




for(int i=0; i< size - count ; 















int a=10
b=a;


print a and b




int arr[] = {1, 2, 3, 4};
					0  1  2  3

  (2) * (4) = 8




Assume address of arr is 4101 and size of int is 4 bytes
int main() {
    int arr[5] = {1, 2, 3, 4, 5};
							
    printf("%u   %u", arr+1, &arr+1);
    return 0;
}



a=69
*b;
b=&a;
**c;
c=&b;

a, &a
b, &b, 










(*p)[4] = &Array

int *p;
p=array;

int arr[] = {4, 5, 6};
const int* ptr = arr;
ptr[1] = 10;
printf("%d", arr[1]);


int arr[] = {1, 2, 3, 4, 5};
int *const ptr = arr;
ptr[3] = 10;
printf("%d", ptr[3]);









